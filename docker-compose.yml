version: '3.8'


services:
  app:
    container_name: app
    build: ./
    ports:
      - 8000:8000
    env_file:
      - .env
    depends_on:
      - db
      - migrate
    networks:
      - app_network
    restart: on-failure
  

  db:
    image: postgres:15
    environment:
    - POSTGRES_DB=library
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    ports:
      - 5432:5432
    container_name: postgres
    env_file:
      - .env
    volumes:
      - db_postgres:/var/lib/postgresql/data
    networks:
      - app_network
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5


  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    container_name: migrate
    command: ["up"]
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network


  zookeeper:
    restart: always
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes


  kafka:
    restart: always
    container_name: kafka
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

volumes:
  db_postgres:
  kafka-volume:
  zookeeper-volume:

networks:
  app_network:
    driver: bridge